package isnork.g3;

import isnork.g3.utils.SimpleUtil;
import isnork.sim.SeaLifePrototype;
import isnork.sim.GameObject.Direction;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Set;
import java.util.TreeMap;

class Message {
	Direction direction = null;
	Direction directionAngle = null;
	SeaLifePrototype slp;
	int r;
	int id;
	int freq;

	public Message(Direction direction,Direction angle, SeaLifePrototype slp, int r, int id,
			int freq) {

		this.direction = direction;
		this.slp = slp;
		this.r = r;
		this.id = id;
		this.freq = freq;
		this.directionAngle=angle;
	}

	public Message(SeaLifePrototype slp, int r, int freq, Direction angle) {

		this.slp = slp;
		this.r = r;
		this.freq = freq;
		this.directionAngle=angle;
	}

	public boolean equals(Object o) {
		if (o instanceof Message) {
			Message c = (Message) o;
			// System.err.println("Comparing2... "+(this.r==c.r)
			// +" "+(this.slp.getName().equals(c.slp.getName())));
			if ((this.r == c.r)
					&& ((this.direction == null) || (c.direction == null) || (this.direction == c.direction))
					&& ((this.directionAngle== null) || (c.directionAngle == null) || (this.directionAngle== c.directionAngle))
					&& this.slp.getName().equals(c.slp.getName())) {
				return true;
			}
		}
		return false;

	}

	public int hashCode() {
		return (this.r + this.slp.hashCode());
	}
}

class HuffmanNode {

	HuffmanNode nodes[];

	String c;
	int freq;
	int n;

	public HuffmanNode(int n) {
		this.n = n;
		nodes = new HuffmanNode[n];
	}

}

public class EncodedCommunication {

	private int nAlphabet = 26;
	TreeMap<Integer, LinkedList<Message>> messages;

	TreeMap<Integer, LinkedList<HuffmanNode>> nodes;
	private HuffmanNode hTree = null;

	HashMap<Message, String> msgs = new HashMap<Message, String>();
	HashMap<String, Message> rmsgs = new HashMap<String, Message>();
	HashMap<Integer, LinkedList<String>> table = new HashMap<Integer, LinkedList<String>>();

	public EncodedCommunication(Set<SeaLifePrototype> slps, int r) {

		messages = new TreeMap<Integer, LinkedList<Message>>();
		nodes = new TreeMap<Integer, LinkedList<HuffmanNode>>();
		// Build encodings
		int j = 0;
		for (SeaLifePrototype slp : slps) {

			// If it is moving encode the directions
			if (slp.getSpeed() != 0) {

				for (Direction d : Direction.values()) {

					for (Direction d2 : Direction.values()) {
						for (int i = 0; i <= r; i++) {
							Message m = new Message(d, d2,slp, i, -1, (slp
									.getMinCount() + slp.getMaxCount())
									/ 2 + slp.getHappiness());

							if (messages.containsKey(m.freq)) {
								messages.get(m.freq).add(m);
								HuffmanNode n = new HuffmanNode(26);
								n.freq = m.freq;
								nodes.get(m.freq).add(new HuffmanNode(26));
								j++;
							} else {
								LinkedList<Message> l = new LinkedList<Message>();
								l.add(m);
								messages.put(m.freq, l);
								LinkedList<HuffmanNode> n = new LinkedList<HuffmanNode>();
								HuffmanNode nd = new HuffmanNode(26);
								nd.freq = m.freq;
								n.add(nd);
								nodes.put(m.freq, n);
								j++;
							}
						}
					}
				}
			} else {
				for (Direction d : Direction.values()) {
					for (int i = 0; i <= r; i++) {
						Message m = new Message( slp, i,  (slp
								.getMinCount() + slp.getMaxCount())
								/ 2 + slp.getHappiness(),d);

						if (messages.containsKey(m.freq)) {
							messages.get(m.freq).add(m);
							HuffmanNode n = new HuffmanNode(26);
							n.freq = m.freq;
							nodes.get(m.freq).add(new HuffmanNode(26));
							j++;
						} else {
							LinkedList<Message> l = new LinkedList<Message>();
							l.add(m);
							messages.put(m.freq, l);
							LinkedList<HuffmanNode> n = new LinkedList<HuffmanNode>();
							HuffmanNode nd = new HuffmanNode(26);
							nd.freq = m.freq;
							n.add(nd);
							nodes.put(m.freq, n);
							j++;
						}
					}

				}
			}
		}
		// System.err.println("Messages to be encoded " + j);

	}

	public int dfs(HuffmanNode tree, String s) {
		int d = 0;
		for (int i = 0; i < 26; i++) {
			if (tree.nodes[i] != null) {
				s += tree.nodes[i].c;
				d++;
				dfs(tree.nodes[i], s);
				s = s.substring(0, s.length() - 1);
			} else {
				if (!s.equals("") && tree.freq != 0) {
					// System.err.println("s " + s + " f" + tree.freq);
					if (this.table.containsKey(tree.freq)) {
						this.table.get(tree.freq).add(s);
					} else {
						LinkedList<String> li = new LinkedList<String>();
						li.add(s);
						this.table.put(tree.freq, li);
					}

				}
				break;
			}

		}
		return d;
	}

	public void buildTree() {
		HuffmanNode node = new HuffmanNode(26);

		int sumFreq = 0;
		char c = 'a';
		for (int i = 0; i < 26; i++) {
			if (this.nodes.isEmpty()) {
				node.nodes[i] = null;
				break;
			}
			int key = this.nodes.firstKey();
			sumFreq += key;
			node.nodes[i] = this.nodes.get(key).getFirst();
			if (node.c == null) {
				node.nodes[i].c = new String();
				node.nodes[i].c += c;
			} else {
				node.nodes[i].c = node.c + c;
			}
			node.nodes[i].freq = key;
			if (this.nodes.get(key).size() == 1)
				this.nodes.remove(key);
			else
				this.nodes.get(key).remove(0);
			c++;
		}

		if (!this.nodes.isEmpty()) {
			if (this.nodes.containsKey(sumFreq)) {
				this.nodes.get(sumFreq).add(node);
			} else {
				LinkedList<HuffmanNode> n = new LinkedList<HuffmanNode>();
				n.add(node);
				this.nodes.put(sumFreq, n);
			}
			this.buildTree();
		} else {
			this.hTree = node;
			int d = this.dfs(hTree, new String());
			int len = 0;
			for (Integer i : this.table.keySet()) {
				int j = 0;
				for (String s : this.table.get(i)) {
					if (s.length() > len)
						len = s.length();
					Message tmsg = this.messages.get(i).get(j);
					j++;
					this.rmsgs.put(s, tmsg);
					this.msgs.put(tmsg, s);
				}
			}
			if (SimpleUtil.DEBUG)
				System.err.println("Maximum length of encoded word " + len);
			return;
		}

	}

	public String getEncodedString(Message m) {

		return this.msgs.get(m);
	}

	public Message getDecodedString(String encoded) {

		return this.rmsgs.get(encoded);
	}

}
