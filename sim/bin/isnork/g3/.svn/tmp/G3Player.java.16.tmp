package isnork.g3;

import isnork.g3.strategy.SpiralStrategy;
import isnork.g3.strategy.SpiralStrategyPlayer;
import isnork.sim.GameConfig;
import isnork.sim.Observation;
import isnork.sim.Player;
import isnork.sim.SeaLifePrototype;
import isnork.sim.iSnorkMessage;
import isnork.sim.GameObject.Direction;

import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Set;
import java.util.TreeMap;

import org.apache.log4j.Logger;

//REMOVE System.out

class ObservedCreature {

	int age = 0;
	int id=0;
	Point2D location = null;
	SeaLifePrototype slp = null;

	// Direction movement = null;
	// Direction angle;

	public ObservedCreature(Point2D location, int age, SeaLifePrototype slp,
			Direction movement, int id) {

		this.location = location;
		this.age = age;
		this.slp = slp;
		this.id=id;
		// this.movement = movement;

	}
}

public class G3Player extends Player {
	private int id;
	private int tickCount;

	private int TOTAL_TICK = 8 * 60;
	private static int topN = 5;

	private Direction direction;
	private int d = -1, r = -1, n = -1;
	Point2D whereIAm = null;
	Point2D whereIWasOneTurnAgo = null;
	Point2D whereIWasTwoTurnsAgo = null;
	private SpiralStrategy spiralStrategy;
	private ArrayList<Set<iSnorkMessage>> myIncomingMessages;
	private Set<SeaLifePrototype> seaLifePossibilities;
	private Set<SeaLifePrototype> topSLPossibilities;
	private boolean goingAfterCreature = false;
	private Point2D currentDest;
	double numCreaturesWithHighValue = 0;
	private ArrayList<DangerousCreature> dangerousCreaturesAroundYou;
	private Communication myCommunication;
	private EncodedCommunication encodedCommunication;
	private String currentSendingMessage = new String();
	private int msgOffset = 0;
	private boolean sendingMessageComplete = true;
	private HashMap<Integer, String> currentReceivingMessages = new HashMap<Integer, String>();
	private HashMap<Integer, iSnorkMessage> initiatingMessage = new HashMap<Integer, iSnorkMessage>();
	private boolean endGame;
	String nameOfCreaturePursuing;
	private ArrayList<ObservedCreature> observedCreatures = new ArrayList<ObservedCreature>();
	private ArrayList<ObservedCreature> observedCreaturesFromEntireGame = new ArrayList<ObservedCreature>();
	private boolean tracking = false;
	private Set<Observation> whatYouSee;
	private Point2D trackedCreatureLocation;
	private CreatureToTrack creatureImTracking;
	private int IDofCreatureImTracking = -1000;
	private double TRACKING_THRESHOLD = 50;
	private static int OBSERV_PERIOD = 3;
	private static final Logger log = Logger.getLogger(G3Player.class);
<<<<<<< .mine
	private 
=======
	
	private double maximumScore=0;
>>>>>>> .r135

	@Override
	public String getName() {
		return "G3: Nautical Navigator ";
	}

	public int getScore(String creatName) {
		for (SeaLifePrototype slp : seaLifePossibilities)
			if (creatName != null) {
				if (slp.getName() != null) {
					if (slp.getName().equals(creatName)) {
						return slp.getHappiness();
					}
				}
			}
		return -1;
	}

	public SeaLifePrototype getSLP(String name) {

		for (SeaLifePrototype slp : this.topSLPossibilities) {
			if (slp.getName().equals(name)) {
				return slp;
			}
		}
		// Should never reach here
		return null;
	}

	public ArrayList<ObservedCreature> getObservedCreatures() {

		return this.observedCreatures;
	}

	public void computeMaximumScore() {
		
		for(SeaLifePrototype slp:this.seaLifePossibilities) {
			int num=java.lang.Math.max(slp.getMaxCount(), 3);
			for(int i=1;i<=num;i++) {
				this.maximumScore+=slp.getHappiness()/(double)i;
			}
		}
		
	}
	
	public boolean maximumScoreAchieved() {
		
		return (this.getHappiness()>=this.maximumScore);
	}
	
	public DirectionAngle getRelativeDir(Point2D p1, Point2D p2) {

		if (p1.equals(p2))
			return null;

		if (p1.getY() < p2.getY()) {
			if (p1.getX() < p2.getX()) {
				if ((Math.abs(p1.getX()) - Math.abs(p1.getY())) < (Math.abs(p2
						.getX()) - Math.abs(p2.getY()))) {
					return DirectionAngle.NNE;
				} else if ((Math.abs(p1.getX()) - Math.abs(p1.getY())) == (Math
						.abs(p2.getX()) - Math.abs(p2.getY()))) {
					return DirectionAngle.NE;
				} else {
					return DirectionAngle.NEE;
				}

			} else if (p1.getX() > p2.getX()) {
				if ((Math.abs(p1.getX()) - Math.abs(p1.getY())) < (Math.abs(p2
						.getX()) - Math.abs(p2.getY()))) {
					return DirectionAngle.NNW;
				} else if (Math.abs(p1.getX()) - Math.abs(p1.getY()) == (Math
						.abs(p2.getX()) - Math.abs(p2.getY()))) {
					return DirectionAngle.NW;
				} else {
					return DirectionAngle.NWW;
				}

			} else
				return DirectionAngle.N;

		} else if (p1.getY() > p2.getY()) {
			if (p1.getX() < p2.getX()) {
				if ((Math.abs(p1.getX()) - Math.abs(p1.getY())) < (Math.abs(p2
						.getX()) - Math.abs(p2.getY()))) {
					return DirectionAngle.SSE;
				} else if ((Math.abs(p1.getX()) - Math.abs(p1.getY())) == (Math
						.abs(p2.getX()) - Math.abs(p2.getY()))) {
					return DirectionAngle.SE;
				} else {
					return DirectionAngle.SEE;
				}

			} else if (p1.getX() > p2.getX()) {
				if ((Math.abs(p1.getX()) - Math.abs(p1.getY())) < (Math.abs(p2
						.getX()) - Math.abs(p2.getY()))) {
					return DirectionAngle.SSW;
				} else if (Math.abs(p1.getX()) - Math.abs(p1.getY()) == (Math
						.abs(p2.getX()) - Math.abs(p2.getY()))) {
					return DirectionAngle.SW;
				} else {
					return DirectionAngle.SWW;
				}

			} else
				return DirectionAngle.S;

		} else {
			if (p1.getX() == p2.getX())
				return null;
			else if (p1.getX() < p2.getX())
				return DirectionAngle.E;
			else
				return DirectionAngle.W;
		}

		// if ((deg <= DirectionAngle.E.deg))
		// return DirectionAngle.E;
		//
		// if ((deg <= DirectionAngle.NEE.deg))
		// return DirectionAngle.NEE;
		//
		// if ((deg <= DirectionAngle.NE.deg))
		// return DirectionAngle.NE;
		//
		// if ((deg <= DirectionAngle.NNE.deg))
		// return DirectionAngle.NNE;
		//
		// if ((deg <= DirectionAngle.N.deg))
		// return DirectionAngle.N;
		//
		// if ((deg <= DirectionAngle.NNW.deg))
		// return DirectionAngle.NNW;
		//
		// if ((deg <= DirectionAngle.NW.deg))
		// return DirectionAngle.NW;
		//
		// if ((deg <= DirectionAngle.NWW.deg))
		// return DirectionAngle.NWW;
		//
		// if ((deg <= DirectionAngle.W.deg))
		// return DirectionAngle.W;
		//
		// if ((deg <= DirectionAngle.SWW.deg))
		// return DirectionAngle.SWW;
		//
		// if ((deg <= DirectionAngle.SW.deg))
		// return DirectionAngle.SW;
		//
		// if ((deg <= DirectionAngle.SSW.deg))
		// return DirectionAngle.SSW;
		//
		// if ((deg <= DirectionAngle.S.deg))
		// return DirectionAngle.S;
		//
		// if ((deg <= DirectionAngle.SSE.deg))
		// return DirectionAngle.SSE;
		//
		// if ((deg <= DirectionAngle.SE.deg))
		// return DirectionAngle.SE;
		//
		// if ((deg <= DirectionAngle.SEE.deg))
		// return DirectionAngle.SSE;
		//
		// return null;

	}

	public ArrayList<ObservedCreature> removeOldAndUpdate(ArrayList<ObservedCreature> newCreatures) 
	{
		for (int i = 0; i < this.observedCreatures.size(); i++) {
			ObservedCreature obs = this.observedCreatures.get(i);
			if (obs.age == OBSERV_PERIOD) {
				this.observedCreatures.remove(i);
				i--;
				continue;
			} else
				obs.age++;
		}

		for (int i = 0; i < newCreatures.size(); i++) {
			for (int j = i + 1; j < newCreatures.size(); j++) {
				if (newCreatures.get(i).location.getX() == newCreatures.get(j).location
						.getX()
						&& newCreatures.get(i).location.getY() == newCreatures
								.get(j).location.getY()
						&& newCreatures.get(i).slp.getName().equals(
								newCreatures.get(j).slp.getName())) {
					newCreatures.remove(j);
				}

			}
		}
		for (ObservedCreature o : newCreatures) {

			this.observedCreatures.add(o);
		}
		return this.observedCreatures;
	}

	int getScoreOfSLP(SeaLifePrototype slp, int averageScore, int averagePopulation) 
	{
		return slp.getHappiness();
	}
	
	int getScoreOfSLP(SeaLifePrototype slp) 
	{
		return slp.getHappiness();
	}
	
	int getScoreOfSLP(String creatureName) 
	{
		Iterator<SeaLifePrototype> myIter = seaLifePossibilities.iterator();
		while(myIter.hasNext())
		{
			SeaLifePrototype mySLP = myIter.next();
			if(mySLP.getName().equals(creatureName))
			{
				return mySLP.getHappiness();
			}
		}
		
		return 0;
	}

	/**
	 * This function filters out creatures whose score is either too low or are
	 * very frequent
	 */
	private Set<SeaLifePrototype> filterOutSLP(Set<SeaLifePrototype> slps,
			int topN) {

		this.topSLPossibilities = new HashSet<SeaLifePrototype>();
		if (this.seaLifePossibilities.size() < topN) {
			this.topSLPossibilities.addAll(slps);
			return this.topSLPossibilities;
		}

		TreeMap<Integer, LinkedList<SeaLifePrototype>> rankedSLP = new TreeMap<Integer, LinkedList<SeaLifePrototype>>();
		for (SeaLifePrototype slp : slps) {
			int score = this.getScoreOfSLP(slp, 0, 0);
			if (rankedSLP.containsKey(score))
				rankedSLP.get(score).add(slp);
			else {
				LinkedList<SeaLifePrototype> toAdd = new LinkedList<SeaLifePrototype>();
				toAdd.add(slp);
				rankedSLP.put(score, toAdd);
			}
		}

		for (int i = 0; i < topN; i++) {
			for (SeaLifePrototype slp : rankedSLP.lastEntry().getValue()) {
				this.topSLPossibilities.add(slp);
				i++;
				if (i == topN)
					break;
			}
			if (i == topN)
				break;
			rankedSLP.remove(rankedSLP.lastKey());
		}
		return this.topSLPossibilities;

	}
	
	/*private void addToMyTrackingCreaturesIfNotAlreadyThere(Observation myObs)
	{
		SeaLifePrototype matchingSLP = null;
		int myId = 0;
		Point2D location = null;
		Iterator<SeaLifePrototype> myIter = seaLifePossibilities.iterator();
		while(myIter.hasNext())
		{
			SeaLifePrototype mySLP = myIter.next();
			if(mySLP.getName().equals(myObs.getName()))
			{
				matchingSLP = mySLP;
				myId = myObs.getId();
				location = myObs.getLocation();
			}
		}

		if(matchingSLP != null) //If it's not a scuba diver 
		{
			if(getScoreOfSLP(matchingSLP) >= TRACKING_THRESHOLD)
			{
				CreatureToTrack myCTT = new CreatureToTrack(matchingSLP, myId, location);
				if(!myTrackingCreaturesContains(myCTT))
				{
					if((id == -30))
						System.out.println(id + "   *Added creature: " + myCTT.getSeaLifePrototype().getName() + " with ID: " + myCTT.getId());
					myCreaturesToTrack.add(myCTT);
				}
				else
				{
					if((id == -30))
						System.out.println(id + "   Already contains this creature");
				}
			}
			else
			{
				if((id == -30))
					System.out.println(id + "   Not above threshold, so not worth tracking");
			}
		}
		else
		{
			if((id == -30))
				System.out.println(id + "   could not add it to myCreaturesToTrack");
		}
	}*/
	
	/*private boolean myTrackingCreaturesContains(CreatureToTrack myCTT)
	{
		//System.out.println("Checking if myCreaturesToTrack already contains the creature " + myCTT.getSeaLifePrototype().getName() + " with ID: " + myCTT.getId());
		for(int i = 0; i < myCreaturesToTrack.size(); i++)
		{
			CreatureToTrack myExistingCTT = myCreaturesToTrack.get(i);
			if(myExistingCTT.getSeaLifePrototype().getName().equals(myCTT.getSeaLifePrototype().getName()))
			{
				if(compareIds(myExistingCTT.getId(),myCTT.getId(),myCTT.getSeaLifePrototype()))
				{
					return true;
				}
			}
		}
		return false;
	}
	
	boolean compareIds(int id1, int id2, SeaLifePrototype slp) {
		if((id1%slp.getMaxCount())==(id2%slp.getMaxCount()))
			return true;
		return false;
	}*/
	
	private void addNewObservedCreaturesToEntireGameList()
	{
		for(int i = 0; i < observedCreatures.size(); i++)
		{
			observedCreaturesFromEntireGame.add(observedCreatures.get(i));
		}
	}
	
	@Override
	public String tick(Point2D myPosition, Set<Observation> whatYouSee,
			Set<iSnorkMessage> incomingMessages,
			Set<Observation> playerLocations) {
		tickCount++;
		this.whatYouSee=whatYouSee;

		
		ArrayList<ObservedCreature> myObservedCreatures = getObservedCreatures();

		
		
		//***************
		//Looking at the array list
		System.out.println("\n********************");
		System.out.println(id + "Tick count: " + tickCount
				+ " Creatures being broadcast to me");
				
		if (myObservedCreatures.size() > 0) {
			for (int m = 0; m < myObservedCreatures.size(); m++) {
				ObservedCreature o = myObservedCreatures.get(m);
				System.out.println(id + "  Creature: " + o.slp.getName() + ", Score: "
						+ o.slp.getHappiness() + ", location: " + o.location + "id: " + o.id
						+ ", age: " + o.age);
			}
		}
		//****************

		ArrayList<ObservedCreature> newCreatures = new ArrayList<ObservedCreature>();
		updateDangerousCreaturesAroundYou(myPosition, whatYouSee);
		printDangerousreatures();

		whereIAm = myPosition;
		myIncomingMessages.add(incomingMessages);

		Message nm;
		for (iSnorkMessage ism : incomingMessages) {
			if (ism.getMsg() != null) {
				// log.debug("Received something " + ism.getMsg()
				// + " from " + ism.getSender() + " " + this.getId());
				String tMsg = this.currentReceivingMessages
						.get(ism.getSender());
				if (tMsg == null) {
					this.currentReceivingMessages.put(ism.getSender(), ism
							.getMsg());
					this.initiatingMessage.put(ism.getSender(), ism);
				} else {
					if (this.currentReceivingMessages.get(ism.getSender())
							.isEmpty())
						this.initiatingMessage.put(ism.getSender(), ism);
					tMsg += ism.getMsg();
					this.currentReceivingMessages.put(ism.getSender(), tMsg);
				}

				if ((nm = this.encodedCommunication.getDecodedString(tMsg)) != null) {
					// if(SimpleUtil.DEBUG)
					// System.out.println(id + " Received a message from "
					// + ism.getSender() + " " + nm.directionAngle + " "
					// + nm.r + " " + nm.directionAngle + " "
					// + nm.slp.getName());
					this.currentReceivingMessages.put(ism.getSender(),
							new String());

					Point2D location;

					Point2D sender = this.initiatingMessage
							.get(ism.getSender()).getLocation();
					if(nm.directionAngle!=null)
					location = new Point2D.Double(sender.getX() + nm.r
							* nm.directionAngle.dx, sender.getY() + nm.r
							* nm.directionAngle.dy);
					else
						location = new Point2D.Double(sender.getX(), sender.getY());
					// if (SimpleUtil.DEBUG)
					// log.debug(" Location of " + nm.slp.getName() + " " +
					// location.getX() + " " + location.getY());
					ObservedCreature obs = new ObservedCreature(location, 0,
							nm.slp, null,nm.id);
					newCreatures.add(obs);
					this.currentReceivingMessages.put(ism.getSender(),
							new String());
				}
			}
		}
		this.removeOldAndUpdate(newCreatures);
		addNewObservedCreaturesToEntireGameList();
		
		// If we see nothing and have completed sending the previous message send blank message
		if (whatYouSee.isEmpty() && (this.sendingMessageComplete == true)) {
			return null;
		}

		long max = Long.MIN_VALUE;
		Observation happiestObs = null;
		//String initCreat = null;

		//If not completed sending the previous message go on
		if (this.sendingMessageComplete == false) {
			if ((this.msgOffset + 1) == this.currentSendingMessage.length())
				this.sendingMessageComplete = true;
			this.msgOffset++;
			return this.currentSendingMessage.substring(this.msgOffset - 1,
					this.msgOffset);
		} else {
			boolean sawMyTracking=false;
			for (Observation obCreat : whatYouSee) {
				//This creature is not "interesting"
				SeaLifePrototype slp = this.getSLP(obCreat.getName());
				if(slp==null)
					continue;
				int obScore=this.getScoreOfSLP(slp,0, 0);
				if (obScore>= max && !obCreat.getName().equals(this.getName()) ||((this.creatureImTracking!=null) && (obCreat.getName().equals(this.creatureImTracking.getName()))) &&!sawMyTracking) {
					if ((this.creatureImTracking != null) && (obCreat.getName().equals(this.creatureImTracking.getName()))) 
					{
						sawMyTracking=true;
					}
					max = obScore;
					happiestObs = obCreat;
					myCommunication.sawCreature(obCreat);
					if (nameOfCreaturePursuing != null && currentDest != null) {
						log.debug("The creature I'm pursuing is: "
								+ nameOfCreaturePursuing
								+ " and the creature I see is: "
								+ obCreat.getName());
						if (obCreat.getName().equals(nameOfCreaturePursuing) || currentDest.distance(whereIAm) < 2) {
							log.debug(id + "    ****Found the creature the diver was looking for (or got to that area)!****");
							goingAfterCreature = false;
							nameOfCreaturePursuing = null;
							myCommunication.setCreaturePursuingToNull();
						}
					}
				}
			}

			//If nothing interesting to update the rest of the group
			if (happiestObs == null) {
				return null;
			}
			if (happiestObs != null
					&& !happiestObs.getName().equals(this.getName())) {
			
				SeaLifePrototype slp = this.getSLP(happiestObs.getName());
				if (slp == null)
					return null;
				Message m;

				int freq = (slp.getMinCount() + slp.getMaxCount()) / 2
						+ slp.getHappiness();
				m = new Message(slp, (int) this.whereIAm.distance(happiestObs
						.getLocation()), freq, this.getRelativeDir(
						this.whereIAm, happiestObs.getLocation()),happiestObs.getId()%slp.getMaxCount());

				this.currentSendingMessage = this.encodedCommunication
						.getEncodedString(m);

				// log.debug("Msg "
				// + m.slp.getName()
				// + " "
				// + (int) this.whereIAm.distance(happiestObs
				// .getLocation()) + " CM "
				// + this.currentSendingMessage);
				if (this.currentSendingMessage.length() > 1) {
					this.sendingMessageComplete = false;
					this.msgOffset = 1;
				}
				return this.currentSendingMessage.substring(0, 1);
			}

		}
		// initCreat = happiestObs.getName().substring(0, 1);
		// System.out.println.print(id + "Broadcasting initial "+initCreat+
		// " of creature " + happiestObs.getName()+" with happiness score "+
		// max);
		return null;
	}

	public void printWhatYouSee(Set<Observation> whatYouSee) {
		Iterator<Observation> myIter = whatYouSee.iterator();
		// log.debug("*****OBS THIS TICK******");
		while (myIter.hasNext()) {
			Observation myObs = myIter.next();
			// log.debug("   myObs: " + myObs.getName() + " ID: " +
			// myObs.getId() + " happiness: " + myObs.happiness()+
			// " isDangeorus: " + myObs.isDangerous() + " location: "+
			// myObs.getLocation() + "direction: " + myObs.getDirection());
		}
	}

	public void printDangerousreatures() {
		int count = 1;
		// log.debug("***Dangerous Creatures at tick " + tickCount + "***");
		for (int i = 0; i < dangerousCreaturesAroundYou.size(); i++) {
			DangerousCreature myDC = dangerousCreaturesAroundYou.get(i);
			// log.debug("Creature #" + count + ": " + myDC.getName() + ", ID: "
			// + myDC.getId() + ", isFresh: " + myDC.isFresh() +
			// ", numTicksOnSameLocation: " + myDC.getNumTicksOnSameLocation());
			count++;
		}
		// log.debug("*********");
	}

	public void updateDangerousCreaturesAroundYou(Point2D myPosition, Set<Observation> whatYouSee) 
	{
		setDangerousCreaturesToNotFresh();
		Iterator<Observation> myIter = whatYouSee.iterator();
		while (myIter.hasNext()) {
			Observation myObs = myIter.next();
			if (myObs.isDangerous()) 
			{
				boolean foundCreatureInArrayList = false;
				for (int i = 0; i < dangerousCreaturesAroundYou.size(); i++) 
				{
					DangerousCreature currentDangerousCreature = dangerousCreaturesAroundYou.get(i);
					if (myObs.getName() == currentDangerousCreature.getName()&& myObs.getId() == currentDangerousCreature.getId()) 
					{
						currentDangerousCreature.updateLocation(myObs.getLocation(), myObs.getDirection());
						foundCreatureInArrayList = true;
					}
				}

				if (foundCreatureInArrayList == false) 
				{
					int dangerScore = findDangerScore(myObs);
					dangerousCreaturesAroundYou.add(new DangerousCreature(myObs.getName(), myObs.getId(), myObs.getLocation(), myObs.getDirection(), dangerScore));
				}
			}
		}
		removeNotFreshCreatures();
	}

	public void setDangerousCreaturesToNotFresh() {
		for (int i = 0; i < dangerousCreaturesAroundYou.size(); i++) {
			DangerousCreature currentDangerousCreature = dangerousCreaturesAroundYou
					.get(i);
			currentDangerousCreature.setNotFresh();
		}
	}

	public void removeNotFreshCreatures() {
		int size = dangerousCreaturesAroundYou.size();
		ListIterator<DangerousCreature> listIterator = dangerousCreaturesAroundYou
				.listIterator();
		while (listIterator.hasNext()) {
			DangerousCreature dc = listIterator.next();

			if (dc.isFresh() == false) {
				listIterator.remove();
			}
		}
		int newSize = dangerousCreaturesAroundYou.size();
		// log.debug("size before: " + size + ", new size: " + newSize);
	}

	public int findDangerScore(Observation myObs) {
		for (SeaLifePrototype slp : seaLifePossibilities) {
			if (myObs.getName() != null) {
				if (slp.getName() != null) {
					if (slp.getName().equals(myObs.getName())) {
						return -2 * slp.getHappiness();
					}
				}
			}
		}
		// log.debug("**ERROR: SHOULD NOT REACH HERE");
		return 0;
	}

	@Override
	public Direction getMove() {

		if ((id == -30))
			log.debug("\ngetMove() just called: tick=" + tickCount
					+ " position=" + whereIAm);
		Direction d = Direction.W;
		int timeLeft = TOTAL_TICK - tickCount;

		// this "2" should depend on how dangerous the waters are
		if (timeLeft <= 2 * timeToHome() && timeLeft >= timeToHome()) {
			endGame = true;
		}

		if (endGame == true) 
		{
			if (timeLeft <= 1.4 * timeToHome()) {
				if ((id == -30))
					log.debug(id+ "final end game strategy, just go home and don't take into account dangerous creatures");
				d = moveToHome();
			} else {
				if ((id == -30))
					log.debug(id + "END GAME STRATEGY: MOVE TOWARDS HOME IN A WAY THAT AVOIDS DANGEROUS CREATURES");
				if (whereIAm.equals(new Point2D.Double(0, 0))) {
					// log.debug("Stay put, already on ship");
					return null;
				} else {
					d = moveAwayFromDanger(new Point2D.Double(0, 0));
				}
			}
		}

		else 
		{
			SpiralStrategyPlayer ssPlayer = spiralStrategy.getPlayer(-id);
			Point2D p = ssPlayer.getCurrentPoint();
			if (whereIAm.getX() == p.getX() && whereIAm.getY() == p.getY()) 
			{
				ssPlayer.switchToNextPoint();
				p = ssPlayer.getCurrentPoint();
			}
			if (whereIAm.equals(whereIWasTwoTurnsAgo)) {
				ssPlayer.switchToNextPoint();
				p = ssPlayer.getCurrentPoint();
			}

			CreatureLocation myCreatureLocation = myCommunication.findDestinationPointBasedOnIncomingMessages(getObservedCreatures(), whereIAm);
			Point2D myDestination = myCreatureLocation.getLocation();
			
			CreatureToTrack myCreature = creatureToTrack(); //this function returns a CreatureToTrack 
			if(myCreature != null)
			{
				creatureImTracking = myCreature;
				tracking = true;
			}
			else
			{
				creatureImTracking = null;
				tracking = false;
			}
			
			if(tracking)
			{
				if((id == -30))
					System.out.println(id + "Tracking creature: " + creatureImTracking.getName() + " with ID: " + creatureImTracking.getId());
				d = moveAwayFromDanger(getCreatureLocation(creatureImTracking));
			} 
			else if (myDestination.getX() != -99999)
			{
				if((id == -30))
					System.out.println(id + "**************New Destination! It is " + myDestination);
				d = moveAwayFromDanger(myDestination);
				currentDest = myDestination;
				goingAfterCreature = true;
				nameOfCreaturePursuing = myCreatureLocation.getCreatureName();

			} 
			else
			{	
				// No good creature to go see, keep searching in spiral formation
				if((id == -30))
					System.out.println(id + "No good creature to see, keep searching in spiral formation");
				d = moveAwayFromDanger(p, ssPlayer);
			}
		}
		whereIWasTwoTurnsAgo = whereIWasOneTurnAgo;
		whereIWasOneTurnAgo = whereIAm;
		return d;
	}

	/*public Direction makeRandomMove() {
		Direction d = getNewDirection();
		Point2D.Double p = new Point2D.Double(whereIAm.getX() + d.dx, whereIAm
				.getY()
				+ d.dy);
		while (Math.abs(p.getX()) > GameConfig.d
				|| Math.abs(p.getY()) > GameConfig.d) {
			d = getNewDirection();
			p = new Point2D.Double(whereIAm.getX() + d.dx, whereIAm.getY()
					+ d.dy);
		}
		return d;
	}*/

	@Override
	public void newGame(Set<SeaLifePrototype> seaLifePossibilites, int penalty,
			int d, int r, int n) {
		id = getId();
		tickCount = 0;
		// log.debug(id + "new game " + getId());
		this.d = d;
		this.r = r;
		this.n = n;
		this.myIncomingMessages = new ArrayList<Set<iSnorkMessage>>();
		dangerousCreaturesAroundYou = new ArrayList<DangerousCreature>();
		this.seaLifePossibilities = seaLifePossibilites;
		this.filterOutSLP(this.seaLifePossibilities, topN);
		encodedCommunication = new EncodedCommunication(
				this.topSLPossibilities, r);
		encodedCommunication.buildTree();
		endGame = false;
		spiralStrategy = new SpiralStrategy(d, r, n);
		myCommunication = new Communication(d, r, n, id);
		myCommunication.createCreatureObjects(seaLifePossibilities);
		this.nameOfCreaturePursuing = null;
		//myCreaturesToTrack = new ArrayList<CreatureToTrack>();
	}

	public double timeToDest(Point2D dest) {
		// minimal time to destination
		double x1 = whereIAm.getX();
		double y1 = whereIAm.getY();
		double x2 = dest.getX();
		double y2 = dest.getY();
		double deltaX = Math.abs(x1 - x2);
		double deltaY = Math.abs(y1 - y2);
		double diagonal = Math.min(deltaX, deltaY);
		double orthogonal = Math.abs(deltaX - deltaY);
		return diagonal * 3 + orthogonal * 2;
	}

	public double timeToHome() {
		return timeToDest(new Point2D.Double(0, 0));
	}

	public Direction moveToDest(Point2D dest) {
		double x1 = whereIAm.getX();
		double y1 = whereIAm.getY();
		double x2 = dest.getX();
		double y2 = dest.getY();
		double deltaX = Math.abs(x1 - x2);
		double deltaY = Math.abs(y1 - y2);
		// already on dest
		if (deltaX == 0 && deltaY == 0)
			return null;
		// always perform diagonal moves after all orthogonal moves
		boolean diag = (deltaX == deltaY);
		if (diag) {
			if (x2 > x1 && y2 < y1)
				return Direction.NE;
			else if (x2 < x1 && y2 < y1)
				return Direction.NW;
			else if (x2 < x1 && y2 > y1)
				return Direction.SW;
			else if (x2 > x1 && y2 > y1)
				return Direction.SE;
		} else {
			if (deltaX > deltaY) {
				if (x2 > x1)
					return Direction.E;
				else if (x2 < x1)
					return Direction.W;
			} else if (deltaX < deltaY) {
				if (y2 < y1)
					return Direction.N;
				else if (y2 > y1)
					return Direction.S;
			}
		}
		return null;
	}

	public Direction moveToHome() {
		// log.debug(id + "move home");
		return moveToDest(new Point2D.Double(0, 0));
	}
	
	public Point2D getCreatureLocation(CreatureToTrack ctt) {
		Point2D location=null;
		for (Observation o : whatYouSee) {
			if (o.getId()==ctt.getId()) {
				location=o.getLocation();
				break;
			}
		}
		if (location==null)
			return null;
		
		Point2D movingOffset=getMovingOffset(trackedCreatureLocation, location);
		trackedCreatureLocation=location;
		Point2D potentialLocation=new Point2D.Double(location.getX()+movingOffset.getX(),
			location.getY()+movingOffset.getY());
		return potentialLocation;
	}
	
	private boolean creatureMoves(Observation o)
	{
		Iterator<SeaLifePrototype> myIter = seaLifePossibilities.iterator();
		while(myIter.hasNext())
		{
			SeaLifePrototype mySLP = myIter.next();
			if(mySLP.getName().equals(o.getName()))
			{
				if(mySLP.getSpeed() == 1)
					return true;
				else
					return false;
			}
		}
		return false;
	}
	
	private CreatureToTrack creatureToTrack()
	{
		double bestScore=Double.MIN_VALUE;
		CreatureToTrack bestCreatureToTrack = null;
		for (Observation o : whatYouSee) 
		{
			if(creatureMoves(o) && getScoreOfSLP(o.getName()) > TRACKING_THRESHOLD)
			{
				boolean beenSeenBefore = false;
				for(int i = 0; i < observedCreaturesFromEntireGame.size(); i++)
				{
					ObservedCreature myObservedCreature = observedCreaturesFromEntireGame.get(i);
					if(myObservedCreature.slp.getName().equals(o.getName()))
					{
						System.out.println("The names match: " + myObservedCreature.slp.getName() + " so it's been seen before. Don't track");
						beenSeenBefore = true;
					}
				}
				
				
				if(beenSeenBefore == false || o.getId() == IDofCreatureImTracking)
				{
					int score = getScoreOfSLP(o.getName());
					if(score > bestScore)
					{
						bestScore = score;
						bestCreatureToTrack = new CreatureToTrack(o.getName(), o.getId());
					}
				}
			}
		}
		
		if (bestCreatureToTrack==null)
		{
			if((id == -30))
				System.out.println(id + "no good creature to track right now");
			return null;
		}
		else
		{
			IDofCreatureImTracking = bestCreatureToTrack.getId();
			if(id == -30)
				System.out.println(id + "   ****Tracking: " + bestCreatureToTrack.getName() + " with id : " + bestCreatureToTrack.getId());
			return bestCreatureToTrack;
		}
	}
	
	public Point2D getMovingOffset(Point2D p1, Point2D p2) {
		if (p1==null || p2==null)
			return new Point2D.Double(0, 0);
		else
			return new Point2D.Double(p2.getX()-p1.getX(), p2.getY()-p1.getY());
	}
	
	public Direction moveAwayFromDanger(Point2D p) {
		return moveAwayFromDanger(p, null);
	}

	public Direction moveAwayFromDanger(Point2D p, SpiralStrategyPlayer ssPlayer) {
		ArrayList<Direction> allValidDirections = checkWall(buildAllDirections());
		// d will now be an arraylist of all possible directions we can move in
		// that are valid (i.e. that don't go off the board)
		if ((id == -30)) {
			log.debug(id + "Tick: " + tickCount);
			log.debug(id + "There are " + allValidDirections.size()
					+ " valid directions that don't go off the board");
			log.debug(id + "There are " + dangerousCreaturesAroundYou.size()
					+ " dangerous creatures around.");
		}

		double minDirectionPenalty = -1000000.0;
		Direction safestDirection = Direction.N;

		ArrayList<Direction> completelySafeDirections = new ArrayList<Direction>();

		Point2D dest = p;

		for (int i = 0; i < allValidDirections.size(); i++)
		{
			Direction currentDir = allValidDirections.get(i);
			double directionPenalty = 0;
			for (int w = 0; w < dangerousCreaturesAroundYou.size(); w++) 
			{
				DangerousCreature myDangCreat = dangerousCreaturesAroundYou.get(w);
				directionPenalty += myDangCreat.getPenalty(whereIAm,currentDir, !endGame, tickCount);
			}
			//if ((id == -30))
				//System.out.println(id + "directionPenalty for " + currentDir + ": "+ directionPenalty);
			if (directionPenalty > minDirectionPenalty) {
				safestDirection = currentDir;
				minDirectionPenalty = directionPenalty;
			}

			if (directionPenalty == 0) // If the direction penalty is 0 then this is a completely safe direction
			{
				completelySafeDirections.add(currentDir);
			} 
			else 
			{
				if (ssPlayer != null) {
					if (currentDir != null) {
						Point2D pointInThisDirection = new Point2D.Double(whereIAm.getX() + currentDir.getDx(), whereIAm.getY() + currentDir.getDy());
						if (pointInThisDirection.equals(p)) {
							ssPlayer.switchToNextPoint();
							dest = ssPlayer.getCurrentPoint();
						}
					}
				}
			}
		}

		if (completelySafeDirections.size() == 0 || completelySafeDirections.size() == 1) {
			/*if ((id == -30)) {
				if (completelySafeDirections.size() == 0)
					System.out.println(id + "No completely safe directions, going in the one that's the least dangerous: " + safestDirection);
				else
					System.out.println(id + "Only one safe direction: " + safestDirection + ", making it now");
			}*/
			return safestDirection;
		} else {
			//if ((id == -30))
				//System.out.println(id + "There are " + completelySafeDirections.size() + " safe directions");
			Direction minDirection = Direction.N;
			double minDistance = Double.MAX_VALUE;
			for (int i = 0; i < completelySafeDirections.size(); i++) {
				Point2D pointAfterMove;
				if (completelySafeDirections.get(i) != null) {
					pointAfterMove = new Point2D.Double(
							completelySafeDirections.get(i).getDx()
									+ whereIAm.getX(), completelySafeDirections
									.get(i).getDy()
									+ whereIAm.getY());
					double distance = pointAfterMove.distance(dest);
					if (distance < minDistance) {
						minDistance = distance;
						minDirection = completelySafeDirections.get(i);
					}
				}
			}
			//if ((id == -30))
				//System.out.println(id + "Choosing direction closest towards goal of " + dest + " :" + minDirection);
			return minDirection;
		}
	}

	public ArrayList<Direction> buildAllDirections() {
		ArrayList<Direction> d = new ArrayList<Direction>();
		d.add(Direction.E);
		d.add(Direction.NE);
		d.add(Direction.N);
		d.add(Direction.NW);
		d.add(Direction.W);
		d.add(Direction.SW);
		d.add(Direction.S);
		d.add(Direction.SE);
		d.add(null);
		return d;
	}

	public ArrayList<Direction> checkWall(ArrayList<Direction> d) {
		if (whereIAm.getY() == -GameConfig.d) {
			d.remove(Direction.N);
			d.remove(Direction.NW);
			d.remove(Direction.NE);
			// log.debug(id + "wall to the north, don't move N, NW, or NE");
		}
		if (whereIAm.getY() == GameConfig.d) {
			d.remove(Direction.S);
			d.remove(Direction.SW);
			d.remove(Direction.SE);
			// log.debug(id + "Wall to the south, don't move S, SW, or SE");
		}
		if (whereIAm.getX() == -GameConfig.d) {
			d.remove(Direction.W);
			d.remove(Direction.NW);
			d.remove(Direction.SW);
			// log.debug(id + "Wall to the west, don't move W, NW, or SW");
		}
		if (whereIAm.getX() == GameConfig.d) {
			d.remove(Direction.E);
			d.remove(Direction.NE);
			d.remove(Direction.SE);
			// log.debug(id + "Wall to the east, don't move E, NE, or SE");
		}
		return d;
	}
}
